using HtmlAgilityPack;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace Watt2PDFLibrary
{
    public class WattpadBook
    {
        public string Title { get; set; }
        public string Url { get; set; }
        public IList<WattpadChapter> Chapters { get; set; }
        private string _htmlString;

        public WattpadBook(string url)
        {
            this.Url = url;
            this.Chapters = new List<WattpadChapter>();
        }

        public WattpadBook CreateBook()
        {
            //return Task.Run(() =>
            //{
                HtmlAgilityPack.HtmlWeb htmlWeb = new HtmlWeb();
                HtmlAgilityPack.HtmlDocument htmldoc = htmlWeb.Load(this.Url);

                this.Chapters = this._GetChapterList(htmldoc);

                foreach (var chapter in this.Chapters)
                {
                    if (chapter.Url == "#")
                        continue;

                    if (!chapter.Url.Contains("http"))
                        chapter.Url = "http://wattpad.com/" + chapter.Url;

                    chapter.GeneratePages();
                }
                return this;
            //}


                //);
        }

        public string ToHtmlString()
        {
            if (this._htmlString != null) return this._htmlString;

            StringBuilder sb = new StringBuilder();

            sb.Append("<html>");
            sb.Append("<head>");

            sb.Append("</head>");
            sb.Append("<body style='font-size:8px;'>");
            sb.Append("<small>Generated by Watt2PDF</small><br />");
            sb.Append("<strong>No copyright infrigement intended.</strong><br />");
            sb.Append("<p>Please visit original link at <a href='" + this.Url + "'>Wattpad</a></p>");
            foreach (var chapter in this.Chapters)
            {
                if (chapter.Pages == null) continue;

                sb.Append("<h1>" + chapter.Title + "</h1>");
                sb.AppendLine("<br/>");

                foreach (var page in chapter.Pages)
                {
                    sb.Append(page.Content);
                }

                sb.Append("<br />");
            }
            sb.Append("<small>Generated by Watt2PDF</small>");
            sb.Append("</body>");
            sb.AppendLine("</html>");
            this._htmlString = sb.ToString();

            return this._htmlString;
        }





        private List<WattpadChapter> _GetChapterList(HtmlAgilityPack.HtmlDocument htdoc)
        {
            List<WattpadChapter> ret = new List<WattpadChapter>();

            IEnumerable<HtmlAgilityPack.HtmlNode> selectList = htdoc.DocumentNode.Descendants("select")
                                        .Where(x => x.Attributes["class"].Value == "selectBox");

            if (selectList.ToList().Count == 0) return null;
            if (selectList == null) return null;

            var selectElement = selectList.Single();

            foreach (var cNode in selectElement.ChildNodes)
            {
                if (cNode.Name == "option")
                {
                    ret.Add(new WattpadChapter
                    {
                        Url = cNode.GetAttributeValue("value", "NO_URL"),
                        Title = cNode.GetAttributeValue("title", "UNTITLED")
                    });
                }
            }

            return ret;
        }

    }
}